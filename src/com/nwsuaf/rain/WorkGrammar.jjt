/**
 * JJTree template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
}

PARSER_BEGIN(WorkGrammar)
package com.nwsuaf.rain;
import java.io.FileReader;
import java.io.FileNotFoundException;
public class WorkGrammar
{
  public static void main(String args [])throws FileNotFoundException
  {
   FileReader Fr = new FileReader("main.c"); 
    new WorkGrammar(Fr);
    try
    {
      SimpleNode n = WorkGrammar.Start();
      n.dump("");
      System.out.println("END");
    }
    catch (Exception e)
    {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
    }
  }
}

PARSER_END(WorkGrammar)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| < "//" (~[ "\n", "\r" ])*
    (
      "\n"
    | "\r"
    | "\r\n"
    ) >
| < "/*" (~[ "*" ])* "*"
    (
      ~[ "/" ] (~[ "*" ])* "*"
    )*
    "/" >
}
TOKEN : /* KEYS */
{
  < INT : "int" >
| < DOUBLE : "double" >
| < FLOAT : "float" >
| < CHAR : "char" >
| < VOID : "void" >
| < FOR : "for" >
| < WHILE : "while" >
| < RETURN : "return" >
| < IF : "if" >
| 	< MAIN:"main">
}
TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL :
    < DECIMAL_LITERAL > ([ "l", "L" ])?
  | < HEX_LITERAL > ([ "l", "L" ])?
  | < OCTAL_LITERAL > ([ "l", "L" ])? 
    >
| < #DECIMAL_LITERAL : [ "1"-"9" ] ([ "0"-"9" ])* >
| < #HEX_LITERAL : "0" [ "x", "X" ] ([ "0"-"9", "a"-"f", "A"-"F" ])+ >
| < #OCTAL_LITERAL : "0" ([ "0"-"7" ])* >
}
TOKEN : /* OPERATORS */
{
  < PLUS : "+" >
| < MINUS : "-" >
| < MULTIPLY : "*" >
| < DIVIDE : "/" >
| < ASSIGN : "=" >
| < GT : ">" >
| < LT : "<" >
| < EQUAL : "==" >
}

TOKEN : /* SEPARATER */
{
  < QUATION : "\"" >
| < SEMICOLON : ";" >
| < BLBRACE : "{" >
| < BRBRACE : "}" >
| < LBRACE : "(" >
| < RBRACE : ")" >
| < COMMA : "," >
| < EXCLA_SYM : "!" >
}
TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER :
    < LETTER >
    (
      < LETTER >
    | < DIGIT >
    )* >
| < #LETTER : [ "_", "a"-"z", "A"-"Z" ] >
| < #DIGIT : [ "0"-"9" ] >
}

SimpleNode Start() :
{}
{
  Program()
  {
    return jjtThis;
  }
}

void Program() :
{}
{
 < INT>
 < MAIN>
 < LBRACE>
 < RBRACE>
 < BLBRACE>
	(SentenceBlock())*
	(
	  ReturnSent()
	)
 < BRBRACE>
}

void SentenceBlock():
{}
{
  Sentence()
| < BLBRACE>
(SentenceBlock())*
< BRBRACE>
}

void Sentence() :
{}
{
  SequenceSen()
  | ConditionSen()
  | LoopSent()
}

void SequenceSen() :
{}
{
   [
      AssigmentSen()
    | DeclareSen()
   ]
  < SEMICOLON>
}

void DeclareSen() :
{}
{
  [
  	 <INT>
   | <DOUBLE>
   | <FLOAT>
   | <CHAR>
  ]
   Identifier()
   (<COMMA> Identifier())*
}

void AssigmentSen() :
{}
{
  Identifier()
  <ASSIGN>
  Expression()
}

void ConditionSen() :
{}
{
  <IF>
   Condition()
   SentenceBlock()
}

void LoopSent() :
{}
{
  <WHILE>
  Condition()
  SentenceBlock()
}

void Condition() :
{}
{
  "("
  Expression()
  Relations()
  Expression()
  ")"
}
  
void Expression() :
{}
{
  AdditiveExpression()
}

void AdditiveExpression() :
{}
{
  MultiplicativeExpression()
  (
    (
      "+"
    | "-"
    )
    MultiplicativeExpression()
  )*
}

void MultiplicativeExpression() :
{}
{
  UnaryExpression()
  (
    (
      "*"
    | "/"
    | "%"
    )
    UnaryExpression()
  )*
}

void UnaryExpression() :
{}
{
  "(" Expression() ")"
| Identifier()
| Integer()
}

void Identifier() :
{}
{
  < IDENTIFIER >
}

void Integer() :
{}
{
  < INTEGER_LITERAL >
}

void Relations() :
{}
{
  <GT>
  | <LT>
  | <EQUAL>
}

void ReturnSent() :
{}
{
	< RETURN > <INTEGER_LITERAL> < SEMICOLON>
}